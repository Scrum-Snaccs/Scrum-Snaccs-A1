{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","title","author","type","pages","volume","method","participants","year","field_1","field_2","field_3","posts","componentDidMount","getBlogPost","axios","get","then","response","data","setState","console","log","catch","alert","handleChange","target","name","value","submit","event","preventDefault","payload","url","resetUserInputs","search","concat","findall","displayBlogPost","length","map","post","index","key","className","this","onSubmit","placeholder","onChange","for","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e445d78a.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n\r\n  state = {\r\n    title: '',\r\n    author: '',\r\n    type: '',\r\n    pages: 0,\r\n    volume: '',\r\n    method: '',\r\n    participants: '',\r\n    year: 2020,\r\n    field_1: 'title',\r\n    field_2: 'any',\r\n    field_3: '',\r\n    posts: []\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.getBlogPost();\r\n  };\r\n\r\n\r\n  getBlogPost = () => {\r\n    axios.get('/api')\r\n      .then((response) => {\r\n        const data = response.data;\r\n        this.setState({ posts: data });\r\n        console.log('Data has been received!!');\r\n      })\r\n      .catch(() => {\r\n        alert('Error retrieving data!!!');\r\n      });\r\n  };\r\n\r\n\r\n  handleChange = ({ target }) => {\r\n    const { name, value } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n\r\n  submit = (event) => {\r\n    event.preventDefault();\r\n\r\n    const payload = {\r\n      title: this.state.title,\r\n      author: this.state.author,\r\n      type: this.state.type,\r\n      pages: this.state.pages,\r\n      volume: this.state.volume,\r\n      method: this.state.method,\r\n      participants: this.state.participants,\r\n      year: this.state.year\r\n    };\r\n    \r\n    axios({\r\n      url: '/api/save',\r\n      method: 'POST',\r\n      data: payload\r\n    })\r\n      .then(() => {\r\n        console.log('Data has been sent to the server');\r\n        this.resetUserInputs();\r\n        //this.getBlogPost();\r\n        alert(\"Success!\");\r\n      })\r\n      .catch(() => {\r\n        console.log('Internal server error');\r\n      });\r\n  };\r\n\r\n  search = (event) => {\r\n    event.preventDefault();\r\n    axios.get('/api/search'.concat('/',this.state.field_1,'/',this.state.field_2,'/',this.state.field_3))\r\n      .then((response) => {\r\n        const data = response.data;\r\n        this.setState({ posts: data });\r\n\r\n        console.log('Data has been received!!');\r\n      })\r\n      .catch(() => {\r\n        alert('Error retrieving data!!!');\r\n      });\r\n  };\r\n\r\n\r\n  findall = (event) => {\r\n    event.preventDefault();\r\n    this.getBlogPost();\r\n  };\r\n\r\n\r\n  resetUserInputs = () => {\r\n    this.setState({\r\n      title: '',\r\n      author: '',\r\n      type: '',\r\n      pages: '',\r\n      volume: '',\r\n      method: '',\r\n      participants: '',\r\n      year: ''\r\n    });\r\n  };\r\n\r\n\r\n  displayBlogPost = (posts) => {\r\n\r\n    if (!posts.length) return null;\r\n\r\n\r\n    return posts.map((post, index) => (\r\n      <div key={index} className=\"blog-post__display\">\r\n        <p>{post.title}</p>\r\n        <p>{post.author}</p>\r\n        <p>{post.type}</p>\r\n        <p>{post.pages}</p>\r\n        <p>{post.volume}</p>\r\n        <p>{post.method}</p>\r\n        <p>{post.participants}</p>\r\n        <p>{post.year}</p>\r\n      </div>\r\n    ));\r\n  };\r\n\r\n\r\n  render() {\r\n\r\n    console.log('State: ', this.state);\r\n\r\n    //JSX\r\n    return(\r\n\r\n      <div className=\"app\">\r\n        <h2>snack Submission</h2>\r\n        \r\n        <form onSubmit={this.submit}>\r\n          \r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"title\"\r\n              placeholder=\"title\"\r\n              value={this.state.title}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"author\"\r\n              placeholder=\"author\"\r\n              value={this.state.author}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"type\"\r\n              placeholder=\"type\"\r\n              value={this.state.type}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"pages\"\r\n              placeholder=\"pages\"\r\n              value={this.state.pages}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"volume\"\r\n              placeholder=\"volume\"\r\n              value={this.state.volume}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"method\"\r\n              placeholder=\"method\"\r\n              value={this.state.method}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"participants\"\r\n              placeholder=\"participants\"\r\n              value={this.state.participants}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"text\"\r\n              name=\"year\"\r\n              placeholder=\"year\"\r\n              value={this.state.year}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <button>Submit</button>\r\n        </form>\r\n\r\n\r\n\r\n        <form onSubmit={this.search}>\r\n          \r\n          <div className=\"form-input\">\r\n            <label for=\"field_1\">Choose a type for search:</label>\r\n            <select id=\"field_1\" name=\"field_1\" type=\"field_1\" value={this.state.field_1} onChange={this.handleChange}>\r\n              <option value=\"title\">title</option>\r\n              <option value=\"author\">author</option>\r\n              <option value=\"type\">type</option>\r\n              <option value=\"pages\">pages</option>\r\n              <option value=\"volume\">volume</option>\r\n              <option value=\"method\">method</option>\r\n              <option value=\"participants\">participants</option>\r\n              <option value=\"year\">year</option>\r\n\r\n            </select>\r\n            \r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n          <label for=\"field_2\">Choose operator for search:</label>\r\n            <select id=\"field_2\" name=\"field_2\" type=\"field_2\" value={this.state.field_2} onChange={this.handleChange}>\r\n              <option value=\"any\">any</option>\r\n              <option value=\"contains\">contains</option>\r\n              <option value=\"is\">is</option>\r\n              <option value=\"greater\">greater</option>\r\n              <option value=\"smaller\">smaller</option>\r\n\r\n            </select>\r\n          </div>\r\n\r\n          <div className=\"form-input\">\r\n            <input \r\n              type=\"field_3\"\r\n              name=\"field_3\"\r\n              placeholder=\"information here\"\r\n              value={this.state.field_3}\r\n              onChange={this.handleChange}\r\n            />\r\n          </div>\r\n\r\n          <button>search</button>\r\n        </form>\r\n\r\n\r\n        <div className=\"blog-\">\r\n          {this.displayBlogPost(this.state.posts)}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}